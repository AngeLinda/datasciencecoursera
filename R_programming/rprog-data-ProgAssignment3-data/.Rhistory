View(data)
outcome <- "heart attack"
is.element(outcome, outcome_all)
match(outcome,outcome_all)
data$State
index_all <- c('11','17','23')
index_all <- c(11,17,23)
match(outcome,outcome_all)
index_all[match(outcome,outcome_all)]
?suppressWarnings
data_outcome <- data[,index_all[match(outcome,outcome_all)]]
data[,index_all[match(outcome,outcome_all)] <- as.numeric(data[,index_all[match(outcome,outcome_all)]])
q()
?as.numeric
data_outcome = data[,index_all[match(outcome,outcome_all)]
data_outcome <- as.numeric(data_outcome)
data_outcome = data[,index_all[match(outcome,outcome_all)]
q()
data_outcome = data[,index_all[match(outcome,outcome_all)]
q()
data_outcome = data[,index_all[match(outcome,outcome_all)]]
data_outcome <- as.numeric(data_outcome)
data_outcome <- na.omit(data_outcome)
states <- table(data$State)
name(states)
names(states)
?slice
??slice
?order
states <- table(data$State)
state <- "CA"
is.element(state, names(states)
)
data_of_interest <- subset(data_outcome, State == state)
?subset
data_of_interest <- subset(data_outcome, data$State == state)
data_of_interest <- subset(data_outcome, data$State == state)
(order(data_of_interest), na.last = TRUE)
order(data_of_interest, na.last = TRUE)
data_of_interest <- data_of_interest[order(data_of_interest, na.last = TRUE),2]
data_of_interest <- na.omit(data_of_interest)
data_of_interest[1]
data_of_interest = data[data$State == state,index_all[match(outcome,outcome_all)]]
data_of_interest <- as.numeric(data_of_interest)
min(data_of_interest, na.rm = TRUE))
min(data_of_interest, na.rm = TRUE)
data_of_interest[(data_of_interest == min(data_of_interest, na.rm = TRUE)),]
data_of_interest == min(data_of_interest, na.rm = TRUE)
hospital <- data_of_interest[(data_of_interest == min(data_of_interest, na.rm = TRUE)),]$Hospital.Name
id <- index_all[match(outcome,outcome_all)]
data_of_interest = data[data$State == state,]
data_of_interest[,id] <- as.numeric(data_of_interest[,id])
View(data_of_interest)
data_of_interest <- data_of_interest[complete.cases(data_of_interest),]
data_of_interest = data[data$State == state, id]
data_of_interest = data[data$State == state,]
data_of_interest[,id] <- as.numeric(data_of_interest[,id])
data_of_interest <- data_of_interest[complete.cases(data_of_interest),]
hospital <- data_of_interest[(data_of_interest[, id] == min(data_of_interest[, id])), ]$Hospital.Name
return(hospital[1])
sort(hospital)[1]
rm(list = ls())
# find the best hospital in a state
best <- function(state,outcome) {
## read outcome data
setwd("~/Desktop/R programming/rprog-data-ProgAssignment3-data")
data <- read.csv("outcome-of-care-measures.csv", colClasses = "character")
## check that state and outome are valid
states <- table(data$State)
if(!is.element(state, names(states)) {
stop('invalid state')
}
outcome_all <- c('heart attack','heart failure','pneumonia')
index_all <- c(11,17,23)
if(!is.element(outcome, outcome_all)){
stop('invalid outcome')
}
## return hospital name in that state with lowest 30-day death rate
id <- index_all[match(outcome,outcome_all)]
data_of_interest = data[data$State == state,]
data_of_interest[,id] <- as.numeric(data_of_interest[,id])
data_of_interest <- data_of_interest[complete.cases(data_of_interest),]
hospital <- data_of_interest[(data_of_interest[, id] == min(data_of_interest[, id])), ]$Hospital.Name
sort(hospital)[1]
}
states <- table(data$State)
if(!is.element(state, names(states)) {
stop('invalid state')
}
states <- table(data$State)
if(!is.element(state, names(states)) {
stop('invalid state')
}
setwd("~/Desktop/R programming/rprog-data-ProgAssignment3-data")
data <- read.csv("outcome-of-care-measures.csv", colClasses = "character")
states <- table(data$State)
if(!is.element(state, names(states)) {
stop('invalid state')
}
rm(list = ls())
# find the best hospital in a state
best <- function(state,outcome) {
## read outcome data
setwd("~/Desktop/R programming/rprog-data-ProgAssignment3-data")
data <- read.csv("outcome-of-care-measures.csv", colClasses = "character")
## check that state and outome are valid
states <- table(data$State)
if(!is.element(state, names(states))) {
stop('invalid state')
}
outcome_all <- c('heart attack','heart failure','pneumonia')
index_all <- c(11,17,23)
if(!is.element(outcome, outcome_all)) {
stop('invalid outcome')
}
## return hospital name in that state with lowest 30-day death rate
id <- index_all[match(outcome,outcome_all)]
data_of_interest = data[data$State == state, ]
data_of_interest[,id] <- as.numeric(data_of_interest[,id])
data_of_interest <- data_of_interest[complete.cases(data_of_interest),]
hospital <- data_of_interest[(data_of_interest[, id] == min(data_of_interest[, id])), ]$Hospital.Name
sort(hospital)[1]
}
best("TX", "heart attack")
rm(list = ls())
# find the best hospital in a state
best <- function(state,outcome) {
## read outcome data
setwd("~/Desktop/R programming/rprog-data-ProgAssignment3-data")
data <- read.csv("outcome-of-care-measures.csv", colClasses = "character")
## check that state and outome are valid
states <- table(data$State)
if(!is.element(state, names(states))) {
stop('invalid state')
}
outcome_all <- c('heart attack','heart failure','pneumonia')
index_all <- c(11,17,23)
if(!is.element(outcome, outcome_all)) {
stop('invalid outcome')
}
## return hospital name in that state with lowest 30-day death rate
id <- index_all[match(outcome,outcome_all)]
data_of_interest = data[data$State == state, ]
data_of_interest[,id] <- suppressWarnings(as.numeric(data_of_interest[,id]))
data_of_interest <- data_of_interest[complete.cases(data_of_interest),]
hospital <- data_of_interest[(data_of_interest[, id] == min(data_of_interest[, id])), ]$Hospital.Name
sort(hospital)[1]
}
best("TX", "heart attack")
best("TX", "heart failure")
best("MD", "heart attack")
best("MD", "pneumonia")
best("BB", "heart attack")
best("NY", "hert attack")
best("SC", "heart attack")
best("NY", "pneumonia")
best("AK", "pneumonia")
rm(list = ls())
setwd("~/Desktop/R programming/rprog-data-ProgAssignment3-data")
data <- read.csv("outcome-of-care-measures.csv", colClasses = "character")
state <- "CA"
outcome <- "heart attack"
c("Hospital.Name", column)
id <- index_all[match(outcome,outcome_all)]
data_of_interest = data[data$State == state, ]
data_of_interest[,id] <- suppressWarnings(as.numeric(data_of_interest[,id]))
data_of_interest <- data_of_interest[complete.cases(data_of_interest),]
outcome_all <- c('heart attack','heart failure','pneumonia')
index_all <- c(11,17,23)
id <- index_all[match(outcome,outcome_all)]
data_of_interest = data[data$State == state, ]
data_of_interest[,id] <- suppressWarnings(as.numeric(data_of_interest[,id]))
data_of_interest <- data_of_interest[complete.cases(data_of_interest),]
View(data_of_interest)
ordered_data_of_interest <- order(data_of_interest[id], data_of_interest$Hospital.Name, na.last = NA)
?as.character
as.character(data_of_interest$Hospital.Name[ordered_data_of_interest[1]])
rm(list = ls())
# find the hospital in a state of a certain rank
rankhospital <- function(state, outcome, num = "best") {
## Read outcome data
setwd("~/Desktop/R programming/rprog-data-ProgAssignment3-data")
data <- read.csv("outcome-of-care-measures.csv", colClasses = "character")
## Check that state and outcome are valid
states <- table(data$State)
if(!is.element(state, names(states))) {
stop('invalid state')
}
outcome_all <- c('heart attack','heart failure','pneumonia')
index_all <- c(11,17,23)
if(!is.element(outcome, outcome_all)) {
stop('invalid outcome')
}
## Return hospital name in that state with the given rank 30-day death rate
id <- index_all[match(outcome,outcome_all)]
data_of_interest = data[data$State == state, ]
data_of_interest[,id] <- suppressWarnings(as.numeric(data_of_interest[,id]))
data_of_interest <- data_of_interest[complete.cases(data_of_interest),]
ordered_data_of_interest <- order(data_of_interest[id], data_of_interest$Hospital.Name, na.last = NA)
if (num == "best") {
as.character(data_of_interest$Hospital.Name[ordered_data_of_interest[1]])
} else if (num == "worst") {
as.character(data_of_interest$Hospital.Name[ordered_data_of_interest[length(ordered_data_of_interest)]])
} else if (is.numeric(num)) {
as.character(data_of_interest$Hospital.Name[ordered_data_of_interest[num]])
} else {
stop("invalid num")
}
}
rankhospital("TX", "heart failure", 4)
rankhospital("MD", "heart attack", "worst")
rankhospital("MN", "heart attack", 5000)
rankhospital("NC", "heart attack", "worst")
rankhospital("WA", "heart attack", 7)
rankhospital("TX", "pneumonia", 10)
rankhospital("NY", "heart attack", 7)
setwd("~/Desktop/R programming/rprog-data-ProgAssignment3-data")
data <- read.csv("outcome-of-care-measures.csv", colClasses = "character")
outcome <- "heart attack"
id <- index_all[match(outcome,outcome_all)]
outcome_all <- c('heart attack','heart failure','pneumonia')
index_all <- c(11,17,23)
id <- index_all[match(outcome,outcome_all)]
data_by_state <- split(data[, c("Hospital.Name","State",id)], data$State)
c("Hospital.Name","State",id)
data[, c("Hospital.Name","State",id)]
data[, c(2,7,id)]
data_by_state <- split(data[, c(2,7,id)], data$State)
data_state <- data_by_state
num = "best"
ordered_data_state <- order(data_state[3], data_state$Hospital.Name, na.last = NA)
x <- data_state[3]
data_state$Hospital.Nam
data_state$Hospital.Name
rm(list = ls())
# rank hospitals in all states
rankall <- function(outcome, num = "best") {
## Read outcome data
setwd("~/Desktop/R programming/rprog-data-ProgAssignment3-data")
data <- read.csv("outcome-of-care-measures.csv", colClasses = "character")
## Check that state and outcome are valid
outcome_all <- c('heart attack','heart failure','pneumonia')
index_all <- c(11,17,23)
if(!is.element(outcome, outcome_all)) {
stop('invalid outcome')
}
## For each state, find the hospital of the given rank
id <- index_all[match(outcome,outcome_all)]
data_by_state <- split(data[, c(2,7,id)], data$State) # colomn 2: hospital name; 7: state name
rank_hospital <- function(data_state, num) {
ordered_data_state <- order(data_state[3], data_state$Hospital.Name, na.last = NA)
if (num == "best") {
as.character(data_state$Hospital.Name[ordered_data_state[1]])
} else if (num == "worst") {
as.character(data_state$Hospital.Name[ordered_data_state[length(ordered_data_state)]])
} else if (is.numeric(num)) {
as.character(data_state$Hospital.Name[ordered_data_state[num]])
} else {
stop("invalid num")
}
}
## Return a data frame with the hospital names and the (abbreviated) state name
pre_result <- lapply(data_state, rank_hospital, num)
data.frame(hospital = unlist(pre_result), state = names(pre_result), row.names = names(pre_result))
}
head(rankall("heart attack", 20), 10)
rm(list = ls())
# rank hospitals in all states
rankall <- function(outcome, num = "best") {
## Read outcome data
setwd("~/Desktop/R programming/rprog-data-ProgAssignment3-data")
data <- read.csv("outcome-of-care-measures.csv", colClasses = "character")
## Check that state and outcome are valid
outcome_all <- c('heart attack','heart failure','pneumonia')
index_all <- c(11,17,23)
if(!is.element(outcome, outcome_all)) {
stop('invalid outcome')
}
## For each state, find the hospital of the given rank
id <- index_all[match(outcome,outcome_all)]
data_by_state <- split(data[, c(2,7,id)], data$State) # colomn 2: hospital name; 7: state name
rank_hospital <- function(data_by_state, num) {
ordered_data_state <- order(data_by_state[3], data_by_state$Hospital.Name, na.last = NA)
if (num == "best") {
as.character(data_by_state$Hospital.Name[ordered_data_state[1]])
} else if (num == "worst") {
as.character(data_by_state$Hospital.Name[ordered_data_state[length(ordered_data_state)]])
} else if (is.numeric(num)) {
as.character(data_by_state$Hospital.Name[ordered_data_state[num]])
} else {
stop("invalid num")
}
}
## Return a data frame with the hospital names and the (abbreviated) state name
pre_result <- lapply(data_by_state, rank_hospital, num)
data.frame(hospital = unlist(pre_result), state = names(pre_result), row.names = names(pre_result))
}
head(rankall("heart attack",20),10)
tail(rankall("pneumonia", "worst"), 3)
tail(rankall("heart failure"), 10)
rm(list = ls())
# rank hospitals in all states
rankall <- function(outcome, num = "best") {
## Read outcome data
setwd("~/Desktop/R programming/rprog-data-ProgAssignment3-data")
data <- read.csv("outcome-of-care-measures.csv", colClasses = "character")
## Check that state and outcome are valid
outcome_all <- c('heart attack','heart failure','pneumonia')
index_all <- c(11,17,23)
if(!is.element(outcome, outcome_all)) {
stop('invalid outcome')
}
## For each state, find the hospital of the given rank
id <- index_all[match(outcome,outcome_all)]
data_by_state <- split(data[, c(2,7,id)], data$State) # colomn 2: hospital name; 7: state name
rank_hospital <- function(data_by_state, num) {
ordered_data_state <- order(data_by_state[3], data_by_state$Hospital.Name, na.last = NA)
if (num == "best") {
as.character(data_by_state$Hospital.Name[ordered_data_state[1]])
} else if (num == "worst") {
as.character(data_by_state$Hospital.Name[ordered_data_state[length(ordered_data_state)]])
} else if (is.numeric(num)) {
as.character(data_by_state$Hospital.Name[ordered_data_state[num]])
} else {
stop("invalid num")
}
}
## Return a data frame with the hospital names and the (abbreviated) state name
result <- lapply(data_by_state, rank_hospital, num)
data.frame(hospital = unlist(result), state = names(result))
}
head(rankall("heart attack", 20), 10)
r <- rankall("heart attack", 4)
as.character(subset(r, state == "HI")$hospital)
r <- rankall("pneumonia", "worst")
as.character(subset(r, state == "NJ")$hospital)
r <- rankall("heart failure", 10)
as.character(subset(r, state == "NV")$hospital)
rm(list = ls())
# rank hospitals in all states
rankall <- function(outcome, num = "best") {
## Read outcome data
setwd("~/Desktop/R programming/rprog-data-ProgAssignment3-data")
data <- read.csv("outcome-of-care-measures.csv", colClasses = "character")
## Check that state and outcome are valid
outcome_all <- c('heart attack','heart failure','pneumonia')
index_all <- c(11,17,23)
if(!is.element(outcome, outcome_all)) {
stop('invalid outcome')
}
## For each state, find the hospital of the given rank
id <- index_all[match(outcome,outcome_all)]
data_by_state <- split(data[, c(2,7,id)], data$State) # colomn 2: hospital name; 7: state name
rank_hospital <- function(data_by_state, num) {
ordered_data_state <- order(data_by_state[3], data_by_state$Hospital.Name, na.last = NA)
if (num == "best") {
as.character(data_by_state$Hospital.Name[ordered_data_state[1]])
} else if (num == "worst") {
as.character(data_by_state$Hospital.Name[ordered_data_state[length(ordered_data_state)]])
} else if (is.numeric(num)) {
as.character(data_by_state$Hospital.Name[ordered_data_state[num]])
} else {
stop("invalid num")
}
}
## Return a data frame with the hospital names and the (abbreviated) state name
result <- lapply(data_by_state, rank_hospital, num)
data.frame(hospital = unlist(result), state = names(result))
}
r <- rankall("heart attack", 4)
as.character(subset(r, state == "HI")$hospital)
r <- rankall("pneumonia", "worst")
as.character(subset(r, state == "NJ")$hospital)
rm(list = ls())
# rank hospitals in all states
rankall <- function(outcome, num = "best") {
## Read outcome data
setwd("~/Desktop/R programming/rprog-data-ProgAssignment3-data")
data <- read.csv("outcome-of-care-measures.csv", colClasses = "character")
## Check that state and outcome are valid
outcome_all <- c('heart attack','heart failure','pneumonia')
index_all <- c(11,17,23)
if(!is.element(outcome, outcome_all)) {
stop('invalid outcome')
}
## For each state, find the hospital of the given rank
id <- index_all[match(outcome,outcome_all)]
data_by_state <- split(data[, c(2,7,id)], data$State) # colomn 2: hospital name; 7: state name
rank_hospital <- function(data_by_state, num) {
ordered_data_state <- order(data_by_state[3], data_by_state$Hospital.Name, na.last = NA)
if (num == "best") {
data_by_state$Hospital.Name[ordered_data_state[1]]
} else if (num == "worst") {
data_by_state$Hospital.Name[ordered_data_state[length(ordered_data_state)]]
} else if (is.numeric(num)) {
data_by_state$Hospital.Name[ordered_data_state[num]]
} else {
stop("invalid num")
}
}
## Return a data frame with the hospital names and the (abbreviated) state name
result <- lapply(data_by_state, rank_hospital, num)
data.frame(hospital = unlist(result), state = names(result))
}
r <- rankall("pneumonia", "worst")
as.character(subset(r, state == "NJ")$hospital)
outcome = "pneumonia"
data <- read.csv("outcome-of-care-measures.csv", colClasses = "character")
outcome_all <- c('heart attack','heart failure','pneumonia')
index_all <- c(11,17,23)
id <- index_all[match(outcome,outcome_all)]
x <- data[, c(2,7,id)],
x <- data[, c(2,7,id)]
View(x)
?split
data$State
states <- table(data$State)
data_by_state <- split(data[, c(2,7,id)], data$State)
num = "worst"
x2 <- data_by_state[3]
id <- index_all[match(outcome,outcome_all)]
data_of_interest = data[data$State == state, ]
data_of_interest[,id] <- suppressWarnings(as.numeric(data_of_interest[,id]))
data_of_interest <- data_of_interest[complete.cases(data_of_interest),]
rank_hospital <- function(data_by_state, num) {
ordered_data_state <- order(data_by_state[3], data_by_state$Hospital.Name, na.last = NA)
if (num == "best") {
data_by_state$Hospital.Name[ordered_data_state[1]]
} else if (num == "worst") {
data_by_state$Hospital.Name[ordered_data_state[length(ordered_data_state)]]
} else if (is.numeric(num)) {
data_by_state$Hospital.Name[ordered_data_state[num]]
} else {
stop("invalid num")
}
}
rank_hospital(data_by_state, num)
x3 <- data_by_state[[3]]
View(x3)
?head
data_by_state <- sort(unique(data$State))
states <- table(data$State)
table(data$State)
names(table(data$State))
sort(unique(data$State))
states <- sort(unique(data$State))
result <- list()
rm(list = ls())
# rank hospitals in all states
rankall <- function(outcome, num = "best") {
## Read outcome data
setwd("~/Desktop/R programming/rprog-data-ProgAssignment3-data")
data <- read.csv("outcome-of-care-measures.csv", colClasses = "character")
## Check that state and outcome are valid
outcome_all <- c('heart attack','heart failure','pneumonia')
index_all <- c(11,17,23)
if(!is.element(outcome, outcome_all)) {
stop('invalid outcome')
}
## For each state, find the hospital of the given rank
id <- index_all[match(outcome,outcome_all)]
states <- sort(unique(data$State)) # states <- names(table(data$State))
dataframe <- list()
for(state in states) {
data_of_interest = data[data$State == state, ]
data_of_interest[,id] <- suppressWarnings(as.numeric(data_of_interest[,id]))
data_of_interest <- data_of_interest[complete.cases(data_of_interest),]
ordered_data_of_interest <- order(data_of_interest[id], data_of_interest$Hospital.Name, na.last = NA)
if (num == "best") {
hospital <- as.character(data_of_interest$Hospital.Name[ordered_data_of_interest[1]])
} else if (num == "worst") {
hospital <- as.character(data_of_interest$Hospital.Name[ordered_data_of_interest[length(ordered_data_of_interest)]])
} else if (is.numeric(num)) {
hospital <- as.character(data_of_interest$Hospital.Name[ordered_data_of_interest[num]])
} else {
stop("invalid num")
}
dataframe <- rbind(dataframe, list(hospital[1], state))
}
dataframe <- as.data.frame(dataframe)
colnames(dataframe) <- c('hospital','state')
dataframe
# data_by_state <- split(data[, c(2,7,id)], data$State) # colomn 2: hospital name; 7: state name
#
# rank_hospital <- function(data_by_state, num) {
#     ordered_data_state <- order(data_by_state[[3]], data_by_state$Hospital.Name, na.last = NA)
#
#     if (num == "best") {
#         data_by_state$Hospital.Name[ordered_data_state[1]]
#     } else if (num == "worst") {
#         data_by_state$Hospital.Name[ordered_data_state[length(ordered_data_state)]]
#     } else if (is.numeric(num)) {
#         data_by_state$Hospital.Name[ordered_data_state[num]]
#     } else {
#         stop("invalid num")
#     }
# }
#
# ## Return a data frame with the hospital names and the (abbreviated) state name
# result <- lapply(data_by_state, rank_hospital, num)
# data.frame(hospital = unlist(result), state = names(result))
}
r <- rankall("pneumonia", "worst")
as.character(subset(r, state == "NJ")$hospital)
r <- rankall("heart failure", 10)
as.character(subset(r, state == "NV")$hospital)
source('~/Desktop/R programming/best.R')
source('~/Desktop/R programming/best.R')
source('~/Desktop/R programming/best.R')
source('~/Desktop/R programming/best.R')
source('~/Desktop/R programming/best.R')
source('~/Desktop/R programming/best.R')
